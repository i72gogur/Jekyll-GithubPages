<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/feed.xml" rel="self" type="application/atom+xml" /><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/" rel="alternate" type="text/html" /><updated>2019-11-23T16:21:31+01:00</updated><id>https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Comandos Basicos</title><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/comandos-basicos.html" rel="alternate" type="text/html" title="Comandos Basicos" /><published>2019-11-21T00:00:00+01:00</published><updated>2019-11-21T00:00:00+01:00</updated><id>https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/comandos-basicos</id><content type="html" xml:base="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/comandos-basicos.html">&lt;p&gt;A continuación se muestra un resumen de los comandos básicos que hemos utilizado para el desarrollo de nuestro proyecto.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Instalar ruby: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install ruby-full build-essential zlib1g-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Instalar gestor de gemas: &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Instalar Jekyll: &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll bundler&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generar un nuevo sitio: &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new NombreDelSitio&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compilar el sitio para ser servido: &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Servir el sitio en local: &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;comandos-para-trabajar-con-git&quot;&gt;&lt;strong&gt;COMANDOS PARA TRABAJAR CON GIT:&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Iniciar un repositorio: &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enlazar un directorio local con un repositorio de GitHub: &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin UrlDelRepositorio&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Crear una nueva rama: &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b NombreDeRama&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Añadir todos los archivos al repositorio: &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; ó &lt;code class=&quot;highlighter-rouge&quot;&gt;git add --all&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hacer commit de los cambios realizados: &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;Mensaje&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Subir el contenido actualizado al repositorio: &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin NombreDeRama&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Descargar el contenido desde el repositorio al directorio local: &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>rafa</name></author><summary type="html">A continuación se muestra un resumen de los comandos básicos que hemos utilizado para el desarrollo de nuestro proyecto.</summary></entry><entry><title type="html">Despliegue En Github Pages</title><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/despliegue-en-github-pages.html" rel="alternate" type="text/html" title="Despliegue En Github Pages" /><published>2019-11-21T00:00:00+01:00</published><updated>2019-11-21T00:00:00+01:00</updated><id>https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/despliegue-en-github-pages</id><content type="html" xml:base="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/despliegue-en-github-pages.html">&lt;p&gt;Desplegar tu sitio para que cualquiera pueda visitarlo es muy simple gracias a Jekyll y Github-Pages. Tan solo tienes que seguir estos pasos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Editar el archivo de configuración _config.yml, modificando los parámetros baseurl donde añadiremos el nombre del repositorio desde el que accederemos a nuestro sitio y el parámetro url con la dirección completa de nuestro sitio.
En nuestro caso será: https://i72gogur.github.io/Jekyll-GithubPages&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Iniciamos git en un directorio local con: &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enlazamos el repositorio de git con nuestro directorio local: &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin https://github.com/i72gogur/NombreDelRepositorio.git&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creamos una nueva rama para Github-Pages: &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b gh-pages&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Añadimos todos los archivos: &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hacemos commit: &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;Mensaje&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Subimos el contenido a la rama creada con: &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin gh-pages&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Vamos al apartado de configuración desde nuestro repositorio git y desde la opción de Github Pages seleccionamos la opción de utilizar la rama que hemos creado (gh-pages)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;¡Y listo! Nuestro sitio estará disponible &lt;a href=&quot;https://i72gogur.github.io/Jekyll-GithubPages&quot;&gt;aquí&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>rafa</name></author><summary type="html">Desplegar tu sitio para que cualquiera pueda visitarlo es muy simple gracias a Jekyll y Github-Pages. Tan solo tienes que seguir estos pasos:</summary></entry><entry><title type="html">Plantillas En Jekyll</title><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/plantillas-en-jekyll.html" rel="alternate" type="text/html" title="Plantillas En Jekyll" /><published>2019-11-21T00:00:00+01:00</published><updated>2019-11-21T00:00:00+01:00</updated><id>https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/plantillas-en-jekyll</id><content type="html" xml:base="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/plantillas-en-jekyll.html">&lt;p&gt;Una gran utilidad de jekyll es la reutilización de código por medio de plantillas.
Esta herramienta nos hará mucho más fácil y rápido el desarrollo de nuestro sitio web ya que podemos escribir un html para cada sección que se nos plantee: blogs, investigaciones, posts.
Por ejemplo, aunque tengamos un número considerable de posts, tan solo tendremos que tener una plantilla para ellos.&lt;/p&gt;

&lt;p&gt;Las plantillas funcionan gracias a la etiqueta &amp;lt;h1&amp;gt;DESPLIEGUE EN GITHUB PAGES&amp;lt;/h1&amp;gt;&lt;/p&gt;
&lt;p&gt;
  21 Nov 2019
  
  
    - &lt;a href=&quot;/Jekyll-GithubPages/authors/rafa.html&quot;&gt;Rafael González Guerrero&lt;/a&gt;
  
&lt;/p&gt;

&lt;p&gt;Desplegar tu sitio para que cualquiera pueda visitarlo es muy simple gracias a Jekyll y Github-Pages. Tan solo tienes que seguir estos pasos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Editar el archivo de configuración _config.yml, modificando los parámetros baseurl donde añadiremos el nombre del repositorio desde el que accederemos a nuestro sitio y el parámetro url con la dirección completa de nuestro sitio.
En nuestro caso será: https://i72gogur.github.io/Jekyll-GithubPages&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Iniciamos git en un directorio local con: &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enlazamos el repositorio de git con nuestro directorio local: &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin https://github.com/i72gogur/NombreDelRepositorio.git&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creamos una nueva rama para Github-Pages: &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b gh-pages&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Añadimos todos los archivos: &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hacemos commit: &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;Mensaje&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Subimos el contenido a la rama creada con: &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin gh-pages&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Vamos al apartado de configuración desde nuestro repositorio git y desde la opción de Github Pages seleccionamos la opción de utilizar la rama que hemos creado (gh-pages)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;¡Y listo! Nuestro sitio estará disponible &lt;a href=&quot;https://i72gogur.github.io/Jekyll-GithubPages&quot;&gt;aquí&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;, redactamos la plantilla completa, dejando un hueco para el contenido variable de cada post, publicación, etc. en el que escribimos la etiqueta content, de tal forma que cada html que utilice la plantilla, reemplazará el hueco en blanco por su contenido.&lt;/p&gt;

&lt;p&gt;Este recurso nos facilita el cumplimiento del principio de diseño de consistencia ya que nos permitirá que nuestra web sea homogénea y mejorará la navegabilidad del usuario.&lt;/p&gt;

&lt;p&gt;Por tanto, utilizando esta herramienta nuestros htmls no necesitarán etiqueta doctype, html, head ni body, ya que estos estarán incluidos en las plantillas, solo necesitarán un front matter indicando la plantilla a usar con la sintaxis layout: plantilla.&lt;/p&gt;

&lt;p&gt;Otro aporte curioso que hemos descubierto es que se pueden descargar plantillas gratuitamente en internet, las cuales nos facilitan un directorio parecido al que nos genera jekyll pero con los estilos y htmls del autor. El inconveniente que conlleva es que a menudo estas plantillas pueden presentar problemas de dependencias de versiones de gemas de ruby, pero como hemos instalado previamente el gestor de gemas bundler, no es un problema.&lt;/p&gt;

&lt;p&gt;Para hacer uso de plantillas de internet, basta con ejecutar bundle install desde la terminal, dentro de la carpeta que hayamos descargado y modificar los parámetros del archivo _config.yml a nuestra necesidad.&lt;/p&gt;</content><author><name>leo</name></author><summary type="html">Una gran utilidad de jekyll es la reutilización de código por medio de plantillas. Esta herramienta nos hará mucho más fácil y rápido el desarrollo de nuestro sitio web ya que podemos escribir un html para cada sección que se nos plantee: blogs, investigaciones, posts. Por ejemplo, aunque tengamos un número considerable de posts, tan solo tendremos que tener una plantilla para ellos.</summary></entry><entry><title type="html">Uso De Assets</title><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/uso-de-assets.html" rel="alternate" type="text/html" title="Uso De Assets" /><published>2019-11-21T00:00:00+01:00</published><updated>2019-11-21T00:00:00+01:00</updated><id>https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/uso-de-assets</id><content type="html" xml:base="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/uso-de-assets.html">&lt;p&gt;Otro recurso que nos servirá de utilidad para la elaboración de nuestro sitio web son los assets, los cuales nos permitirán añadir fotos o archivos PDF a nuestros posts. Para ello crearemos una carpeta que con el nombre de assets y en la que incluiremos todas las imágenes o archivos que queremos que aparezcan en nuestra página. Además, también podemos añadir archivos de estilo css y nuestros scripts en javascript de esta forma, organizando la carpeta en subcarpetas tendremos todos los recursos bien organizados.
Después, para utilizarlos simplemente tendremos que enlazarlos añadiendo la ruta del archivo que queremos añadir en el código de nuestro post.&lt;/p&gt;

&lt;p&gt;Por ejemplo, si queremos añadir la imagen de nuestro logotipo en lenguaje Markdown haríamos lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;![Logotipo](/assets/images/logotipo.png)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;La principal utilidad que tiene el uso de assets es a la hora de dar estilo a nuestra página, para ello podemos utilizar Sass que es un preprocesador de lenguaje para hojas de estilo y que podemos usar conjuntamente con CSS.&lt;/p&gt;

&lt;p&gt;Primero crearemos un archivo Saas con extensión .scss, por ejemplo estilos.scss y lo añadiremos a nuestra carpeta de css dentro del directorio de assets. En este archivo dejaremos el front matter vacío, lo cual le indica a jekyll que tiene que procesar y añadiremos también la siguiente línea de código para importar el archivo de estilos, quedando nuestro archivos scss de la siguiente forma:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;@import &quot;main&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Con esto indicamos a Sass que busque un archivo llamado main.scss (que en nuestro caso contendrá el estilo de nuestra página principal) en el directorio correspondiente a los archivos Sass.&lt;/p&gt;

&lt;p&gt;Por último, para usar esta hoja de estilos solamente tendremos que incluir en la cabecera del archivo html al que queramos dar forma la referencia a nuestro archivo scss creado al principio:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/Jekyll-GithubPages/assets/css/styles.css&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para proyectos grandes en los que tenemos varias hojas de estilo esta es la mejor forma de tener organizado nuestro código.&lt;/p&gt;</content><author><name>leo</name></author><summary type="html">Otro recurso que nos servirá de utilidad para la elaboración de nuestro sitio web son los assets, los cuales nos permitirán añadir fotos o archivos PDF a nuestros posts. Para ello crearemos una carpeta que con el nombre de assets y en la que incluiremos todas las imágenes o archivos que queremos que aparezcan en nuestra página. Además, también podemos añadir archivos de estilo css y nuestros scripts en javascript de esta forma, organizando la carpeta en subcarpetas tendremos todos los recursos bien organizados. Después, para utilizarlos simplemente tendremos que enlazarlos añadiendo la ruta del archivo que queremos añadir en el código de nuestro post.</summary></entry><entry><title type="html">Yaml</title><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/yaml.html" rel="alternate" type="text/html" title="Yaml" /><published>2019-11-21T00:00:00+01:00</published><updated>2019-11-21T00:00:00+01:00</updated><id>https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/yaml</id><content type="html" xml:base="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/21/yaml.html">&lt;p&gt;Es un lenguaje de marcado utilizado por Jekyll que nos permite guardar datos de forma serializada, legible para el ser humano, es decir, podremos redactar nuestros datos, acceder a ellos y recorrerlos facilmente con liquid. Presenta las siguientes características:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Front matter: es la cabecera de los archivos que contendrá cierta información que será de utilidad para Jekyll a la hora de compilar el sitio, como por ejemplo, la plantilla empleada en una determinada página o variables como el autor de un post o su título. Realmente el usuario tiene libertad para añadir las variables que crea necesarias a su front matter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Objetos: se declaran con un par atributo: valor, pudiendo aparecer objetos anidados que tendrán que ser indexados con espacios simples a continuación del objeto principal. Es importante utilizar espacios simples y no tabulaciones ya que el lenguaje YAML solo reconoce el espaciado simple.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Arrays: podemos declarar un vecto para almacenar objetos o valores. Para ello cada elemento deberá encontrarse en una línea distinta.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;La sintaxis es muy importante en YAML, basándose fundamentalmente en guiones, espacios y dos puntos.&lt;/p&gt;</content><author><name>leo</name></author><summary type="html">Es un lenguaje de marcado utilizado por Jekyll que nos permite guardar datos de forma serializada, legible para el ser humano, es decir, podremos redactar nuestros datos, acceder a ellos y recorrerlos facilmente con liquid. Presenta las siguientes características:</summary></entry><entry><title type="html">Jekyll</title><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/16/jekyll.html" rel="alternate" type="text/html" title="Jekyll" /><published>2019-11-16T00:00:00+01:00</published><updated>2019-11-16T00:00:00+01:00</updated><id>https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/16/jekyll</id><content type="html" xml:base="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/16/jekyll.html">&lt;p&gt;Jekyll es un generador de sitios web estáticos escrito en lenguaje ruby, esto significa que permite crear fácilmente un directorio organizado para contener nuestros htmls, sus estilos, y cualquier información o recurso que queramos compartir en nuestra página web. Ante cada cambio en sus archivos se debe recompilar todo el sitio para que dichos cambios se hagan efectivos desde la url de nuestro sitio web. Esto es debido a que no serviremos directamente los archivos que modificamos a internet, ya que nosotros los editamos haciendo uso de lenguajes como yaml y liquid, los cuales serán interpretados por jekyll para generar los htmls y css que si se proveerán al cliente.&lt;/p&gt;

&lt;p&gt;Nos permite desarrollar nuestro sitio web de manera sencilla, rápida y segura.
Haciendo uso de un sistema de plantillas que facilita la escritura de muchos htmls, la incorporación de lenguaje markdown, o las funcionalidades de los lenguajes de yaml y liquid para mostrar y hacer uso del contenido almacenado en nuestro directorio.&lt;/p&gt;

&lt;p&gt;Los sitios web estáticos compilan su contenido en el ordenador host local antes de ser servido, esto supone reducir las vulnerabilidades de nuestra base de datos, así como de la posibilidad de que se infiltre código malicioso.&lt;/p&gt;

&lt;p&gt;Sin embargo, no permite gran interacción con el usuario, se usa generalmente para mostrar documentación de proyectos, blogs, y en definitiva sitios con pocos cambios sobre el contenido ya publicado, esto es lo que caracteriza los sitios web estáticos. Fundamentalmente el nuevo contenido que será añadido a nuestro sitio web serán nuevos posts o publicaciones.&lt;/p&gt;</content><author><name>rafa</name></author><summary type="html">Jekyll es un generador de sitios web estáticos escrito en lenguaje ruby, esto significa que permite crear fácilmente un directorio organizado para contener nuestros htmls, sus estilos, y cualquier información o recurso que queramos compartir en nuestra página web. Ante cada cambio en sus archivos se debe recompilar todo el sitio para que dichos cambios se hagan efectivos desde la url de nuestro sitio web. Esto es debido a que no serviremos directamente los archivos que modificamos a internet, ya que nosotros los editamos haciendo uso de lenguajes como yaml y liquid, los cuales serán interpretados por jekyll para generar los htmls y css que si se proveerán al cliente.</summary></entry><entry><title type="html">Liquid</title><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/16/liquid.html" rel="alternate" type="text/html" title="Liquid" /><published>2019-11-16T00:00:00+01:00</published><updated>2019-11-16T00:00:00+01:00</updated><id>https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/16/liquid</id><content type="html" xml:base="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/16/liquid.html">&lt;p&gt;Liquid es un lenguaje de plantillas que nos permite crear “un puente” entre un archivo HTML y un registro de datos. En nuestro caso, el registro de datos será, por ejemplo, el archivo _config.yml del cuál utilizaremos algunas variables generales, como la url del sitio, su nombre, etc.&lt;/p&gt;

&lt;p&gt;A continuación, vamos a ver las funcionalidades que incorpora este lenguaje de marcado y su utilización para desarrollar nuestro sitio web con Jekyll:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Objetos: También llamadas etiquetas de texto, son palabras reservadas que hacen referencia a una entidad y sus propiedades, por entidades nos referimos al archivo config.yml con la palabra site, por ejemplo. Se usan mediante dos braces para abrir y cerar . Entre las variables por defecto están: “site” que tendrá tantas propiedades como queramos añadirle mediante lenguaje yaml, “posts” que hace referencia a la carpeta donde se alojan nuestros blogs se usa site.posts, “pages” hace referencia a los archivos md en el directorio raiz se usa site.pages, “data” hace referencia a la carpeta _data, podremos acceder a ella y sus subcarpetas mediante site.data.NombreCarpeta.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tags: Las etiquetas nos permiten crear cierta lógica en los htmls, como recorrer los elementos de una carpeta de nuestro directorio, por ejemplo. La sintaxis se compone de braces y porcentajes para abrir y cerrar,&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Podemos emplear for, unless, case/when, ifs, if-else, tablerow…
https://shopify.github.io/liquid/tags/comment/ En este enlace encontraréis más etiquetas.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Filtros: Liquid también permite cambiar reformatear una cadena de entrada en una salida distinta, existen diferentes criterios de formateo, que son los distintos filtros, hay gran variedad, cabe destacar el uso del filtro markdownify para pasar md a html.
 https://jekyllrb.com/docs/liquid/filters/ En este enlace encontraréis los filtros     más utilizados para jekyll y al final un enlace a otra web con todos ellos.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>leo</name></author><summary type="html">Liquid es un lenguaje de plantillas que nos permite crear “un puente” entre un archivo HTML y un registro de datos. En nuestro caso, el registro de datos será, por ejemplo, el archivo _config.yml del cuál utilizaremos algunas variables generales, como la url del sitio, su nombre, etc.</summary></entry><entry><title type="html">Serverless</title><link href="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/16/serverless.html" rel="alternate" type="text/html" title="Serverless" /><published>2019-11-16T00:00:00+01:00</published><updated>2019-11-16T00:00:00+01:00</updated><id>https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/16/serverless</id><content type="html" xml:base="https://i72gogur.github.io/Jekyll-GithubPages/Jekyll-GithubPages/2019/11/16/serverless.html">&lt;p&gt;Serverless es un tipo de arquitectura donde los servidores (físicos o en la nube) dejan de existir para el desarrollador y el código se ejecuta en “ambientes de ejecución” administrados por un proveedor, en nuestro caso Jekyll.&lt;/p&gt;

&lt;p&gt;La principal ventaja de una arquitectura serverless es la posibilidad de que el desarrollador se despreocupe de la gestión de la infraestructura sobre la que se ejecuta su servicio (función) y centrarse en la funcionalidad: el ciclo completo de desarrollo se simplifica.&lt;/p&gt;

&lt;p&gt;También nos proporciona un nivel elevado de desacoplamiento entre los diferentes servicios, favoreciendo el desarrollo de arquitecturas basadas en microservicios. Esto facilita mucho el ciclo de vida y los despliegues continuos.&lt;/p&gt;

&lt;p&gt;Por último, una arquitectura serverless nos posibilita reducir el gasto en infraestructura, generando costes únicamente cuando se realiza una petición, y por tanto, cuando la función se ejecuta.&lt;/p&gt;</content><author><name>rafa</name></author><summary type="html">Serverless es un tipo de arquitectura donde los servidores (físicos o en la nube) dejan de existir para el desarrollador y el código se ejecuta en “ambientes de ejecución” administrados por un proveedor, en nuestro caso Jekyll.</summary></entry></feed>